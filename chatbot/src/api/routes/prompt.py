import requests

from fastapi import APIRouter
from openai import OpenAI

from chatbot.config.settings import settings
from chatbot.src.schemas.chat import ChatRequest, ChatResponse
from chatbot.src.schemas.selection import SelectionRequest, SelectionResponse

router = APIRouter()

client = OpenAI(api_key=settings.OPENAI_API_KEY)


@router.post("/api/v1/prompt", response_model=ChatResponse)
async def prompt(request: ChatRequest):
    msg = request.message
    # TODO encode and return response
    # await asyncio.sleep(5)
    selection = SelectionRequest(
        question=msg,
        candidates=[
            'Информацию о жилом фонде, возможностях аренды и заселения Вы можете найти здесь <ссылка на цифровые данные — жильё и заселение>',
            'Получить информацию о медицинских учреждениях федеральной территории "Сириус" Вы можете здесь <ссылка на цифровые данные — медицина и здоровье>',
            'Актуальные вакансии и информацию о трудоустройстве в федеральной территории "Сириус" Вы можете найти здесь <ссылка на цифровые данные — вакансии и работа>',
            'Подробную информацию о всех домах и объектах федеральной территории "Сириус" Вы можете найти здесь «ссылка на цифровые данные - справочные объектов/расступ домов»',
            'Расположение остановок и расписание общественного транспорта Вы можете найти здесь <ссылка на цифровые данные - транспорт>',
            'Информацию об образовательных учреждениях федеральной территории "Сириус" Вы можете найти здесь <ссылка на цифровые данные - образовательные учреждения>',
            'Заняться спортом и поиграть в спортивные игры Вы можете здесь <ссылка на цифровые данные - спортивные объекты>',
            'Прогуляться по красивым местам федеральной территории "Сириус" Вы можете здесь <ссылка на цифровые данные - общественные пространства>',
            'Информацию об учреждениях федеральной территории "Сириус" Вы можете найти здесь <ссылка на цифровые данные - перенесенные учреждения>',
            'Последние новости о событиях, происходящих в федеральной территории "Сириус" Вы можете найти здесь <ссылка на новости>',
            'Актуальные оповещения Вы всегда можете найти здесь <ссылка на оповещения>',
            'Информацию о проводимых работах в федеральной территории "Сириус" Вы можете найти здесь <ссылка на ремонтные работы>',
            'Как преобразилась федеральная территория "Сириус" Вы можете найти здесь <ссылка на билборды и результаты и итоги нашей работы>',
            'Где можно перекусить или провести обед в "Сириусе", смотрите здесь <ссылка на цифровые данные — питание и кафе>',
            'Провести интересно время в "Сириусе" Вы можете здесь <ссылка на цифровые данные — досуг и мероприятия>',
            'Информацию о культурных объектах федеральной территории "Сириус" Вы можете найти здесь <ссылка на цифровые данные — культурные учреждения>',
            'Места для духовного общения и религиозных обрядов в "Сириусе" доступны по ссылке <ссылка на цифровые данные — религиозные объекты>',
            'Узнать, как работает экологическая система в "Сириусе", Вы можете здесь <ссылка на цифровые данные — экология и переработка>',
            'Информация для предпринимателей доступна здесь <ссылка на цифровые данные — бизнес и поддержка>',
            'Интерактивная карта федеральной территории "Сириус" доступна здесь <ссылка на карту ФТ>',
        ],
    )
    response = await select_best(selection)
    return ChatResponse(
        reply=response.chosen,
        success=True,
    )


async def select_best(request: SelectionRequest):
    system_prompt = (
        "Ты — помощник‑эксперт. Перед тобой список возможных ответов на запрос пользователя. "
        "Твоя задача — выбрать **один** самый релевантный. "
        "Верни только текст ответа и его индекс в списке (начиная с 0)."
    )

    candidates_block = "\n".join(f"{i}. {ans}" for i, ans in enumerate(request.candidates))

    user_prompt = (
        f"Вопрос пользователя: «{request.question}»\n\n"
        f"Варианты ответов:\n{candidates_block}\n\n"
        "Какой вариант самый подходящий? Ответь в формате:\n"
        "\"<индекс>.<пробел><сам ответ>\""
    )

    request_body = {
        "model": 'gpt-4o',
        "messages": [{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}],
        "temperature": 0.0,
    }
    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {settings.OPENAI_API_KEY}"}
    response = requests.post(f"{settings.LLM_PROXY_URL}/v1/chat/completions", json=request_body, headers=headers, timeout=60)
    response.raise_for_status()

    text = response.json()["choices"][0]["message"]["content"]

    try:
        idx_str, chosen = text.split(".", 1)
        idx = int(idx_str.strip())
        chosen = chosen.strip().strip('"')
    except ValueError:
        return SelectionResponse(chosen=text, index=-1)

    return SelectionResponse(chosen=chosen, index=idx)